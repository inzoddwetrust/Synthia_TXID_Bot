import re
import telebot
from telebot import types
from processing import get_tron_transaction_details
import uuid
import message_templates as mt

bot = telebot.TeleBot('6951849445:AAG9qk70t3HAZr83xtKJJskHmxBeEX8aE6s')
bot_name = '@synthia_txid_bot'
target_chat = '-1001940414840'

tron_pattern = r'\b([0-9a-fA-F]{64})\b'
temp_storage = {}
superstring = {}


@bot.message_handler(func=lambda message: re.search(tron_pattern, message.text))
def message_with_link(message):
    tron_data = re.findall(tron_pattern, message.text)[0]

    if tron_data:
        unique_id = str(uuid.uuid4())
        temp_storage[unique_id] = tron_data
        print(temp_storage)

        markup = types.InlineKeyboardMarkup()
        yes_button = types.InlineKeyboardButton('–ê–≥–∞, –¥–∞–≤–∞–π!', callback_data=f'save:{unique_id}')
        no_button = types.InlineKeyboardButton('–ù–µ—Ç, –Ω–µ –Ω–∞–¥–æ.', callback_data='do_not_save')
        markup.add(yes_button, no_button)
        bot.reply_to(message, '–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è! –°–æ—Ö—Ä–∞–Ω–∏–º?', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('save:'))
def handle_save_callback_query(call):
    user_name = call.from_user.username
    user_id = call.from_user.id
    unique_id = call.data.split(':')[1]

    if unique_id in temp_storage:
        tron_data = temp_storage[unique_id]

        try:
            # bot.send_message(call.message.chat.id, f'–•–æ—Ä–æ—à–æ, {call.from_user.first_name}.\n\n'
            #                                        f'T–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤ –ª–∏—á–∫–µ, –ø–æ–π–¥–µ–º –≤ {bot_name}')
            prefix = f"–ò—Ç–∞–∫, —É –Ω–∞—Å –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:\n\n"
            response, transaction_info = get_tron_transaction_details(tron_data)
            superstring[user_id] = transaction_info
            postfix = (f"–ó–¥–µ—Å—å –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ?"
                       f"\n(–º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∫—Ä–∞—Ç–∫–æ, –ø–æ—Ç–æ–º –∑–∞–ø–æ–ª–Ω–∏–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
                       )
            bot.send_message(user_id, prefix + response + postfix)

            msg = bot.send_message(user_id, "üë§ –ö—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?")
            bot.register_next_step_handler(msg, client_step)

        except Exception as e:
            bot.send_message(call.message.chat.id,
                             f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –ø–æ—Å–ª–∞—Ç—å, –ø–æ–∫–∞ —Ç—ã –Ω–µ –Ω–∞—á–Ω–µ—à—å —Å–æ –º–Ω–æ–π –¥–∏–∞–ª–æ–≥...\n"
                             f"–¢—ã –≤–ø–µ—Ä–≤—ã–µ –æ–±—â–∞–µ—à—å—Å—è —Å–æ –º–Ω–æ–π, –∏ —É –º–µ–Ω–∞ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –ø–µ—Ä–≤–æ–π.\n\n"
                             f"–ó–∞–π–¥–∏ –≤ {bot_name} –∏ –Ω–∞–∂–º–∏ –º–Ω–µ START, –∞ –ø–æ—Ç–æ–º –≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞.")
            print(e)  # For debugging purposes

        else:
            bot.send_message(call.message.chat.id, f'–•–æ—Ä–æ—à–æ, {call.from_user.first_name}.\n\n'
                                                   f'T–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤ –ª–∏—á–∫–µ, –ø–æ–π–¥–µ–º –≤ {bot_name}')

    else:
        bot.answer_callback_query(call.id, "–°–ª—É—à–∞–π, —ç—Ç–æ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞, –∑–∞–ø–æ—Å—Ç–∏ –µ–µ —Å—é–¥–∞ –µ—â–µ —Ä–∞–∑.")


def client_step(message):
    try:
        superstring[message.from_user.id]["client"] = message.text
        msg = bot.reply_to(message, 'üí∞ –ê –∫—Ç–æ –¥–∏–ª–µ—Ä?')
        bot.register_next_step_handler(msg, dealer_step)
    except Exception as e:
        bot.reply_to(message, 'ooops!')


def dealer_step(message):
    try:
        superstring[message.from_user.id]["dealer"] = message.text
        msg = bot.reply_to(message, 'üöò –ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å?')
        bot.register_next_step_handler(msg, car_step)
    except Exception as e:
        bot.reply_to(message, 'ooops!')


def car_step(message):
    try:
        superstring[message.from_user.id]["car"] = message.text
        msg = bot.reply_to(message, 'üíµ –ò –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞?')
        bot.register_next_step_handler(msg, reason_step)
    except Exception as e:
        bot.reply_to(message, 'ooops!')


def reason_step(message):
    try:
        superstring[message.from_user.id]["reason"] = message.text
        msg = bot.reply_to(message, 'üí¨ –ê –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–¥–æ?')
        bot.register_next_step_handler(msg, final_step)
    except Exception as e:
        bot.reply_to(message, 'ooops!')


def final_step(message):
    try:
        superstring[message.from_user.id]["comment"] = message.text

        markup = types.InlineKeyboardMarkup()
        yes_button = types.InlineKeyboardButton('–î–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º!', callback_data=f'send:{message.from_user.id}')
        no_button = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='ignore')
        markup.add(yes_button, no_button)

        prefix = f"–ü—Ä–æ–≤–µ—Ä—è–µ–º:\n\n"
        response = mt.create_transaction_details_message(superstring[message.from_user.id])
        postfix = f"\n –í—Å–µ –≤–µ—Ä–Ω–æ? –ü–µ—Ä–µ–¥–∞–µ–º –≤ ANTCAR-FINANCE?"
        bot.send_message(message.chat.id, prefix + response + postfix, reply_markup=markup)

    except Exception as e:
        bot.reply_to(message, 'ooops!')


@bot.callback_query_handler(func=lambda call: call.data == 'do_not_save')
def handle_do_not_save_callback_query(call):
    bot.answer_callback_query(call.id, text="–ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('send:'))
def send_to_acounter(call):
    bot.answer_callback_query(call.id, text="Sending")
    print(f"WE ARE HERE!\n {superstring}")

    prefix = f"@{call.from_user.username} –∑–∞–ø–æ—Å—Ç–∏–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —á–∞—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å AntCar:\n\n"
    response = mt.create_transaction_details_message(superstring[call.from_user.id])
    postfix = f"\n –ê —Ç—É—Ç –°—É–ø–µ—Ä—Å—Ç—Ä–æ–∫–∞"
    bot.send_message(target_chat, prefix + response + postfix)


@bot.callback_query_handler(func=lambda call: call.data.startswith('ignore'))
def dont_send_to_acounter(call):
    bot.answer_callback_query(call.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é.')
    bot.send_message(call.message.chat.id, '–ù—É –ª–∞–¥–Ω–æ —Ç–æ–≥–¥–∞. –ù–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"')


def main():
    bot.polling(none_stop=True)


if __name__ == '__main__':
    main()
